#include <stdio.h>
#include "system.h"
#include <altera_avalon_mutex.h>
#include "io.h"
#include "../memory_segment.h"

#define KEY_1   SHARED_ONCHIP_BASE + SHARED_ONCHIP_SIZE_VALUE - 1 
#define KEY_2	(KEY_1 - 1)
#define KEY_3	(KEY_2 - 1)
#define KEY_4	(KEY_3 - 1)
#define KEY_6	(KEY_5 - 1)
#define HEXCHECK (KEY_6 - 1)


#define UNLOCK		0
#define LOCK		1


void imgResize(unsigned char *ImagePtr, unsigned char check)
{ 
    unsigned char resizeimg[1600];
    unsigned char grayscale[1600]; 
    unsigned char* shared;
    volatile unsigned int xDim, yDim;
    unsigned int i,k, n, m, o=0, size, size1; 
    unsigned int x;
    unsigned int y;
    if(check=1)
    shared = (unsigned char*) RESIZE_IMAGE_DATA_1;
    else if(check=2)
    shared = (unsigned char*) RESIZE_IMAGE_DATA_2;
    else if(check=3)
    shared = (unsigned char*) RESIZE_IMAGE_DATA_3;
   // alt_putstr("\n inside the function");    
    //alt_putstr("\n Entering Forloop12");
    xDim = *ImagePtr++; 
    //alt_putstr("\n Entering Forloop13");
    yDim = *ImagePtr++;
    //alt_putstr("\n Entering Forloop14");
    size = xDim*yDim;
    //alt_putstr("\n Entering Forloop15");
    x = xDim>>1;
    y = yDim>>1;

    //printf("\n Entering Forloop  %d,%d",xDim,yDim);
    for(i=0;i<size;i++)
    {  
        grayscale[i]=*ImagePtr++;
    } 

    size1=size>>1;

    //alt_printf("\n Entering Forloop1  %x",size1);
    for(i=0, k=0; k<size1;k++)
    {
        resizeimg[k]= ((grayscale[i + 0] + grayscale[i + 1] + grayscale[i + xDim]+ grayscale[i + xDim]) >> 2);
        //printf(" %d", resizeimg[k]);	
        i += 2;
        if (!(i % xDim))
        {
            i += xDim; 
        }
    }
    //alt_printf("\n Exiting forloop ");
    *shared++ = x;
    *shared++ = y;

    for (n = 0; n < y; n++)
    {
        for (m = 0; m <x; m++)
        {
            *shared++ = resizeimg[o++];
        }
    }
}

int main()
{   
    unsigned int i,k=0;
    for(i=0;i<3000;i++){;}

    alt_mutex_dev* mutex_B  = altera_avalon_mutex_open( "/dev/mutex_1" );
   

    while(1)
    { 
        if((IORD_8DIRECT(KEY_2,0)) == UNLOCK)
        {   k++;
           if (k>3) k=1;
            
            altera_avalon_mutex_lock(mutex_B,1);
            IOWR_8DIRECT(KEY_2,0,LOCK);
           // printf("\n Entering GraySacle");
            if(k=1)
            imgResize(GRAYIMAGE_DATA_1,k);
            else if (k=2)
            imgResize(GRAYIMAGE_DATA_2,k);
            else if (k=3)
            imgResize(GRAYIMAGE_DATA_3,k);
            IOWR_8DIRECT(KEY_3,0,UNLOCK);
            IOWR_8DIRECT(KEY_1,0,UNLOCK);
            altera_avalon_mutex_unlock(mutex_B);
        }
    }
    return 0;
}
